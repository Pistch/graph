---
description: React rules
globs: *.tsx,*.jsx
alwaysApply: false
---
# React Development Rules

## Component Structure
- Use functional components with hooks
- Implement proper cleanup in useEffect when needed
- Keep components focused and single-responsibility
- Extract reusable logic into custom hooks

## Hooks Usage
- Follow hooks naming convention: use[HookName]
- Place hooks at the top level of component
- Add all dependencies to useEffect/useCallback/useMemo
- Use useCallback for event handlers passed to children
- Use useMemo for expensive computations

## Performance Optimization
- Avoid unnecessary re-renders:
  ```typescript
  // Good
  const memoizedCallback = useCallback(() => {
    // callback logic
  }, [/* dependencies */]);

  // Good
  const memoizedValue = useMemo(() => {
    // expensive computation
  }, [/* dependencies */]);
  ```
- Use React.memo() for pure components that render often
- Keep render logic simple and performant

## Event Handling
- Use proper event typing:
  ```typescript
  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    // handle click
  };
  ```
- Prefer controlled components over uncontrolled
- Use event delegation when appropriate

## Props and State Management
- Define explicit prop types using TypeScript interfaces
- Use state only for values that trigger re-renders
- Keep state as close to where it's used as possible
- Use context for truly global state

## Component Lifecycle
- Initialize resources in useEffect
- Clean up subscriptions and event listeners
- Handle loading and error states explicitly
- Use ErrorBoundary for error handling

## Best Practices
- Use semantic HTML elements
- Implement proper accessibility attributes
- Keep JSX clean and readable
- Document complex component behavior
- Write unit tests for components
- Use React.StrictMode in development 